# This file contains the important differences between Export_QE-5.3.0 (red) and the base QE
# file PP/src/pw_export.f90 (blue) which it is based on. I have also included notes to 
# explain the purpose of the changes. Hopefully this will help when adapting Export
# to future QE versions.


25a26,30
# Removed interface because only used write_restart_wfc1
>   INTERFACE write_restart_wfc
>     MODULE PROCEDURE write_restart_wfc1, write_restart_wfc2
>   END INTERFACE

36c41
# Added exportDir to write_restart_wfc subroutine
<     SUBROUTINE write_restart_wfc(iuni, exportDir, &
---
>     SUBROUTINE write_restart_wfc1(iuni, &
50d54
<       character(len = 256), intent(in) :: exportDir

63c67
# Added a variable ig for write loop
<       INTEGER :: nkl, nkr, nkbl, iks, ike, nkt, ikt, igwx, ig
---
>       INTEGER :: nkl, nkr, nkbl, iks, ike, nkt, ikt, igwx

143a148,163
# Removed some unneeded output
>         IF(ionode) THEN
>           CALL iotk_write_begin(iuni,"Kpoint"//iotk_index(ik))
>           CALL iotk_write_attr (attr,"ngw",ngw,first=.true.)
>           CALL iotk_write_attr (attr,"nbnd",nbnd)
>           CALL iotk_write_attr (attr,"gamma_only",gamma_only)
>           CALL iotk_write_attr (attr,"ik",ik)
>           CALL iotk_write_attr (attr,"nk",nk)
>           CALL iotk_write_attr (attr,"kunit",kunit)
>           CALL iotk_write_attr (attr,"ispin",ispin)
>           CALL iotk_write_attr (attr,"nspin",nspin)
>           CALL iotk_write_attr (attr,"scal",scal)
>           CALL iotk_write_attr (attr,"igwx",igwx)
>           CALL iotk_write_empty(iuni,"Info",attr)
>         ENDIF

145c165
# Initialized wtmp as complex 0. Not sure why; they should be 
# equivalent.
<         wtmp = cmplx(0.0_dp, 0.0_dp, kind=dp)
---
>         wtmp = 0.0d0

163,172c183
# Changed write to use a simple loop rather than iotk subroutine
<               do ig = 1, igwx
<                 write(iuni, '(2ES24.15E3)') wtmp(ig)
<               enddo
---
>               CALL iotk_write_dat(iuni,"Wfc"//iotk_index(j),wtmp(1:igwx))

178,201c189,209
# Not sure what the band loop does, but it was commented out. Instead of calling
# iotk subroutine, close output file.
< !        DO j = 1, nbnd
< !          IF( tm ) THEN
< !            IF( npool > 1 ) THEN
< !              IF( ( ikt >= iks ) .and. ( ikt <= ike ) ) THEN
< !                CALL mergewf(wfm(:,j), wtmp, ngwl, igl, me_pool, &
< !                             nproc_pool, root_pool, intra_pool_comm)
< !              ENDIF
< !              IF( ipsour /= ionode_id ) THEN
< !                CALL mp_get( wtmp, wtmp, mpime, ionode_id, ipsour, j, world_comm )
< !              ENDIF
< !            ELSE
< !              CALL mergewf(wfm(:,j), wtmp, ngwl, igl, mpime, nproc, ionode_id, world_comm )
< !            ENDIF
< !            IF( ionode ) THEN
< !              CALL iotk_write_dat(iuni,"Wfcm"//iotk_index(j),wtmp(1:igwx))
< !            ENDIF
< !          ELSE
< !          ENDIF
< !        ENDDO
<         IF(ionode) then
<           close(iuni)
<           !CALL iotk_write_end  (iuni,"Kpoint"//iotk_index(ik))
<         endif
---
>         DO j = 1, nbnd
>           IF( tm ) THEN
>             IF( npool > 1 ) THEN
>               IF( ( ikt >= iks ) .and. ( ikt <= ike ) ) THEN
>                 CALL mergewf(wfm(:,j), wtmp, ngwl, igl, me_pool, &
>                              nproc_pool, root_pool, intra_pool_comm)
>               ENDIF
>               IF( ipsour /= ionode_id ) THEN
>                 CALL mp_get( wtmp, wtmp, mpime, ionode_id, ipsour, j, world_comm )
>               ENDIF
>             ELSE
>               CALL mergewf(wfm(:,j), wtmp, ngwl, igl, mpime, nproc, ionode_id, world_comm )
>             ENDIF
>             IF( ionode ) THEN
>               CALL iotk_write_dat(iuni,"Wfcm"//iotk_index(j),wtmp(1:igwx))
>             ENDIF
>           ELSE
>           ENDIF
>         ENDDO
>         IF(ionode) CALL iotk_write_end  (iuni,"Kpoint"//iotk_index(ik))

206a215,235
# Removed the write_restart_wfc2 subroutine
>     SUBROUTINE write_restart_wfc2(iuni, nbnd)
>       USE io_global, ONLY: ionode, ionode_id
>       IMPLICIT NONE
>       INTEGER, INTENT(in) :: iuni, nbnd
>       LOGICAL :: twrite = .false.
>       INTEGER :: idum, i
>       CHARACTER(len=20) :: section_name = 'wfc'
>       idum = nbnd
>       RETURN
>     END SUBROUTINE

213c242
# Renamed the program to signify that it's different
< PROGRAM pw_export_for_TME
---
> PROGRAM pw_export

222,225c251,265
# Added explanation for exportDir and removed explanations for 
# unused variables
<   !   exportDir    output directory. A directory
<   !                "exportDir" is created and
<   !                output files are put there. All the data
<   !                are accessible through the ""exportDir"/input" file.
---
>   !   pp_file      output file. If it is omitted, a directory
>   !                "prefix.export/" is created in outdir and
>   !                some output files are put there. Anyway all the data
>   !                are accessible through the "prefix.export/index.xml" file which
>   !                contains implicit pointers to all the other files in the
>   !                export directory. If reading is done by the IOTK library
>   !                all data appear to be in index.xml even if physically it
>   !                is not.
>   !   uspp_spsi    using US PP if set .TRUE. writes S | psi >
>   !                and | psi > separately in the output file
>   !   single_file  one-file output is produced
>   !   ascii        ....
>   !
>   !   pseudo_dir   pseudopotential directory
>   !   psfile(:)    name of the pp file for each species

231,232c271,273
# Removed some of the module use statements and variables since not needed
<   USE io_global, ONLY : ionode, ionode_id
---
>   USE fft_base,  ONLY : dfftp
>   USE io_global, ONLY : stdout, ionode, ionode_id
>   USE io_files,  ONLY : psfile, pseudo_dir
240c281
<   USE environment,   ONLY : environment_start
---
>   USE environment,   ONLY : environment_start, environment_end
247,253c288,294
<   real(kind = dp), parameter :: ryToHartree = 0.5_dp
<   !
<   CHARACTER(len=256) :: pp_file, exportDir
<   LOGICAL :: writeWFC
<   !
<   NAMELIST /inputpp/ prefix, outdir, exportDir, writeWFC
---
> 
>   CHARACTER(len=200) :: pp_file
>   CHARACTER(len=iotk_attlenx) :: attr
>   LOGICAL :: found, uspp_spsi, ascii, single_file, raw
> 
>   NAMELIST /inputpp/ prefix, outdir, pp_file, uspp_spsi, ascii, single_file, &
>                      raw, psfile, pseudo_dir

264c305
# Changed some of the default values
<   prefix = ''
---
>   prefix='export'
267,270c308,313
<   exportDir = './Export'
<   !
<   writeWFC  = .true.        ! gdb : by default the wavefunctions are needed, 
<                             !       this gives the user the ability not to write the wavefunctions
---
>   pp_file= ' '
>   uspp_spsi = .false.
>   ascii = .false.
>   single_file = .false.
>   raw = .false.

275,286c318,331
# Changed the name of the output file pp_file
<     ios = f_mkdir_safe( trim(exportDir) )
<     !
<     pp_file = trim(exportDir)//"/input"
---
>       IF( pp_file == ' ' ) THEN
>           !
>           pp_file = trim(prefix)//".export/index.xml"
>           !
>           IF(ionode) ios = f_mkdir_safe( trim(outdir)//"/"//trim(prefix)//".export" )
>       ENDIF

294a340,348
# Removed broadcast statement for unused variables
>   CALL mp_bcast( pp_file, ionode_id, world_comm )
>   CALL mp_bcast( uspp_spsi, ionode_id, world_comm )
>   CALL mp_bcast( ascii, ionode_id, world_comm )
>   CALL mp_bcast( single_file, ionode_id, world_comm )
>   CALL mp_bcast( raw, ionode_id, world_comm )
>   CALL mp_bcast( pseudo_dir, ionode_id, world_comm )
>   CALL mp_bcast( psfile, ionode_id, world_comm )

308c362,364
# Removed unused variables from write_export call and didn't call
# environment_end and STOP
<   CALL write_export (pp_file, exportDir, kunittmp )
---
>   CALL write_export (pp_file, kunittmp, uspp_spsi, ascii, single_file, raw)
> 
>   CALL environment_end ( 'PW_EXPORT' )
311,312c367,368
>   STOP
317c373
< SUBROUTINE write_export (pp_file, exportDir, kunit )
---
> SUBROUTINE write_export (pp_file,kunit,uspp_spsi, ascii, single_file, raw)

330,331c386,387
# Removed some of the module use statements and variables since not needed
<   USE uspp,          ONLY : nkb, vkb
---
>   USE symm_base,      ONLY : nsym, s, invsym, sname, irt, ftau
>   USE  uspp,          ONLY : nkb, vkb
333,334c389,390
<   USE io_files,       ONLY : outdir, prefix, iunwfc, nwordwfc
<   USE io_files,       ONLY : psfile
---
>   USE io_files,       ONLY : nd_nmbr, outdir, prefix, iunwfc, nwordwfc
>   USE io_files,       ONLY : pseudo_dir, psfile

341,356c397,398
# Added some extra use statements for PAW?
<   USE mp_world,       ONLY : world_comm, nproc, mpime
<   !
<   USE upf_module,     ONLY : read_upf
<   !
<   USE pseudo_types, ONLY : pseudo_upf
<   USE radial_grids, ONLY : radial_grid_type
<   !
<   USE wvfct,         ONLY : wg
<   !
<   USE paw_variables,        ONLY : okpaw, ddd_paw, total_core_energy, only_paw
<   USE paw_onecenter,        ONLY : PAW_potential
<   USE paw_symmetry,         ONLY : PAW_symmetrize_ddd
<   USE uspp_param,           ONLY : nh, nhm ! used for PAW
<   USE uspp,                 ONLY : qq_so, dvan_so, qq, dvan
<   USE scf,                  ONLY : rho
---
>   USE mp_world,       ONLY : world_comm, nproc

363c405,406
# Removed/added some variables
<   CHARACTER(256), INTENT(in) :: pp_file, exportDir
---
>   CHARACTER(80), INTENT(in) :: pp_file
>   LOGICAL, INTENT(in) :: uspp_spsi, ascii, single_file, raw
368c411
<   INTEGER :: npool, nkbl, nkl, nkr, npwx_g, im, ink, inb, ms
---
>   INTEGER :: npool, nkbl, nkl, nkr, npwx_g
381,383d421
<   character(len = 300) :: text
386c424
<   LOGICAL :: twf0, twfm, file_exists
---
>   LOGICAL :: twf0, twfm
388,389c426
<   TYPE(pseudo_upf) :: upf       ! the pseudo data
<   TYPE(radial_grid_type) :: grid
---
>   COMPLEX(DP), ALLOCATABLE :: sevc (:,:)
391c428
<   integer, allocatable :: nnTyp(:), groundState(:)
---
>   REAL(DP), ALLOCATABLE :: raux(:)

433,440c470,473
# Redirected output and used built in function instead of
# iotk subroutine
<     !
<     WRITE(stdout,*) "Opening file "//trim(pp_file)
<     !
<     open(50, file=trim(pp_file))
<     !
<     WRITE(stdout,*) "Reconstructing the main grid"
<     !
<   endif
---
>     WRITE(0,*) "Opening file "//trim(pp_file)
>     CALL iotk_open_write(50,file=trim(outdir)//'/'//trim(pp_file))
>     WRITE(0,*) "Reconstructing the main grid"
>   ENDIF

506a540,625
# Changed what was output
<     write(50, '("# Cell volume (a.u.)^3. Format: ''(ES24.15E3)''")')
<     write(50, '(ES24.15E3)' ) omega
<     !
<     write(50, '("# Number of K-points. Format: ''(i10)''")')
<     write(50, '(i10)') nkstot 
<     !
<     write(50, '("# ik, groundState, ngk_g(ik), wk(ik), xk(1:3,ik). Format: ''(3i10,4ES24.15E3)''")')
<     !
<     allocate ( groundState(nkstot) )
<     !
<     groundState(:) = 0
<     DO ik=1,nkstot
<       do ibnd = 1, nbnd
<         if ( wg(ibnd,ik)/wk(ik) < 0.5_dp ) then
<         !if (et(ibnd,ik) > ef) then
<           groundState(ik) = ibnd - 1
<           goto 10
<         endif
<       enddo
<  10   continue
<     enddo
<     ! 
<   endif
<   !
<   ALLOCATE( igwk( npwx_g, nkstot ) )
<   !
---
>     WRITE(0,*) "Writing header"
>     CALL iotk_write_begin(50,"Header")
>     CALL iotk_write_attr (attr,"name",trim(fmt_name),FIRST=.true.)
>     CALL iotk_write_attr (attr,"version",trim(fmt_version))
>     CALL iotk_write_empty(50,"format", ATTR=attr)
>     !
>     CALL iotk_write_attr (attr,"name","Quantum ESPRESSO",FIRST=.true.)
>     CALL iotk_write_attr (attr,"version",trim(version_number))
>     CALL iotk_write_empty(50,"creator", ATTR=attr)
>     CALL iotk_write_end(50,"Header")
>     !
>     WRITE(0,*) "Writing dimensions"
>     CALL iotk_write_begin(50,"Dimensions")
>     CALL iotk_write_attr (attr,"nktot",nkstot,first=.true.)
>     CALL iotk_write_attr (attr,"nspin",nspin)
>     CALL iotk_write_attr (attr,"nk1",nk1)
>     CALL iotk_write_attr (attr,"nk2",nk2)
>     CALL iotk_write_attr (attr,"nk3",nk3)
>     CALL iotk_write_attr (attr,"s1",k1)
>     CALL iotk_write_attr (attr,"s2",k2)
>     CALL iotk_write_attr (attr,"s3",k3)
>     CALL iotk_write_empty(50,"Kpoints",attr)
>     CALL iotk_write_attr (attr,"nbnd",nbnd,first=.true.)
>     CALL iotk_write_empty(50,"Bands",attr)
>     CALL iotk_write_attr (attr,"gamma_only",gamma_only,first=.true.)
>     CALL iotk_write_empty(50,"Gamma_tricks",attr)
>     CALL iotk_write_attr (attr,"npw",ngm_g,first=.true.)
>     CALL iotk_write_empty(50,"Main_grid",attr)
>     CALL iotk_write_attr (attr,"npwx",npwx_g,first=.true.)
>     CALL iotk_write_empty(50,"Wfc_grid",attr)
>     CALL iotk_write_attr (attr,"natoms",nat,first=.true.)
>     CALL iotk_write_empty(50,"Atoms",attr=attr)
>     CALL iotk_write_attr (attr,"nsym",nsym,first=.true.)
>     CALL iotk_write_empty(50,"Symmops",attr=attr)
>     CALL iotk_write_end  (50,"Dimensions")
> 
>     WRITE(0,*) "Writing cell"
>     CALL iotk_write_attr (attr,"units","a.u.",first=.true.)
>     CALL iotk_write_begin(50,"Cell",attr=attr)
>     CALL iotk_write_attr (attr,"alat",alat,first=.true.)
>     CALL iotk_write_attr (attr,"omega",omega)
>     CALL iotk_write_attr (attr,"tpiba",tpiba)
>     CALL iotk_write_attr (attr,"tpiba2",tpiba2)
>     CALL iotk_write_empty(50,"Data",attr=attr)
>     CALL iotk_write_attr (attr,"xyz",at(:,1)*alat,first=.true.)
>     CALL iotk_write_empty(50,"a1",attr=attr)
>     CALL iotk_write_attr (attr,"xyz",at(:,2)*alat,first=.true.)
>     CALL iotk_write_empty(50,"a2",attr=attr)
>     CALL iotk_write_attr (attr,"xyz",at(:,3)*alat,first=.true.)
>     CALL iotk_write_empty(50,"a3",attr=attr)
>     CALL iotk_write_attr (attr,"xyz",bg(:,1)*tpiba,first=.true.)
>     CALL iotk_write_empty(50,"b1",attr=attr)
>     CALL iotk_write_attr (attr,"xyz",bg(:,2)*tpiba,first=.true.)
>     CALL iotk_write_empty(50,"b2",attr=attr)
>     CALL iotk_write_attr (attr,"xyz",bg(:,3)*tpiba,first=.true.)
>     CALL iotk_write_empty(50,"b3",attr=attr)
>     CALL iotk_write_end(50,"Cell")
> 
>     WRITE(0,*) "Writing atoms"
>     CALL iotk_write_begin(50,"Atoms")
>     CALL iotk_write_attr (attr,"natoms",nat,FIRST=.true.)
>     CALL iotk_write_attr (attr,"nspecies",nsp)
>     CALL iotk_write_empty(50,"Data",attr=attr)
>     CALL iotk_write_attr (attr,"units","alat",FIRST=.true.)
>     CALL iotk_write_begin(50,"Positions",attr=attr)
>     DO i = 1, nat
>       xyz = tau(:,i)
> !
> ! this line convert to crystal representation
> !      call cryst_to_cart(1,xyz,bg,-1)
> !
>       CALL iotk_write_attr (attr,"type",trim(atm(ityp(i))),first=.true.)
>       CALL iotk_write_attr (attr,"xyz",xyz)
>       CALL iotk_write_empty(50,"atom"//trim(iotk_index(i)),attr=attr)
>     ENDDO
>     CALL iotk_write_end(50,"Positions")
>     CALL iotk_write_begin(50,"Types")
>     CALL iotk_write_attr (attr,"pseudo_dir",trim(pseudo_dir),FIRST=.true.)
>     CALL iotk_write_empty(50,"Data",attr=attr)
>     DO i=1, nsp
>         CALL iotk_write_attr (attr,"type",trim(atm(i)),FIRST=.true.)
>         CALL iotk_write_attr (attr,"pseudo_file",trim(psfile(i)) )
>         CALL iotk_write_empty(50,"specie"//trim(iotk_index(i)), ATTR=attr )
>     ENDDO
>     CALL iotk_write_end  (50,"Types")
>     CALL iotk_write_end  (50,"Atoms")
>
>     WRITE(0,*) "Writing symmetry operations"
>     CALL iotk_write_begin(50,"Symmetry")
>     CALL iotk_write_attr(attr,"nsym",nsym,first=.true.)
>     CALL iotk_write_attr(attr,"invsym",invsym)
>     CALL iotk_write_empty(50,"symmops",attr)
>     !
>     ! The matrix s is the transpose of the symmetry matrix in direct space,
>     ! in units of a_i.
>     !
>     DO i=1,nsym
>        !
>        CALL iotk_write_attr ( attr,"name", trim(sname(i)), FIRST=.true. )
>        CALL iotk_write_empty(50,"info"//trim(iotk_index(i)), ATTR=attr )
>        !
>        tmp(1) = ftau(1,i) / dble( dfftp%nr1 )
>        tmp(2) = ftau(2,i) / dble( dfftp%nr2 )
>        tmp(3) = ftau(3,i) / dble( dfftp%nr3 )
>        !
>        CALL iotk_write_attr(attr,"units","crystal",first=.true.)
>        !
>        CALL iotk_write_dat (50,"sym"//trim(iotk_index(i)), &
>                                 s(1:3,1:3,i), ATTR=attr, COLUMNS=3)
>        CALL iotk_write_dat (50,"trasl"//trim(iotk_index(i)), tmp(:), ATTR=attr )
>        !
>     ENDDO
>     !
>     CALL iotk_write_end  (50,"Symmetry")
> 
>     WRITE(0,*) "Writing k-mesh"
>     CALL iotk_write_attr (attr,"nk",nkstot,first=.true.)
>     CALL iotk_write_begin(50,"Kmesh",attr=attr)
>     CALL iotk_write_dat  (50,"weights",wk(1:nkstot))
>     CALL iotk_write_dat  (50,"k",xk(1:3,1:nkstot),fmt="(3f15.9)")
>     CALL iotk_write_end  (50,"Kmesh")
> 
>     WRITE(0,*) "Writing other parameters"
>     CALL iotk_write_begin(50,"Other_parameters")
>     CALL iotk_write_attr(attr,"wfc",ecutwfc,first=.true.)
>     CALL iotk_write_attr(attr,"rho",dual*ecutwfc)
>     CALL iotk_write_attr(attr,"units","Rydberg")
>     CALL iotk_write_empty(50,"Cutoff",attr)
>     CALL iotk_write_attr(attr,"nr1",dfftp%nr1,first=.true.)
>     CALL iotk_write_attr(attr,"nr2",dfftp%nr2)
>     CALL iotk_write_attr(attr,"nr3",dfftp%nr3)
>     CALL iotk_write_empty(50,"Space_grid",attr)
>     CALL iotk_write_attr(attr,"nelec",nelec,first=.true.)
>     CALL iotk_write_empty(50,"Charge",attr)
>     CALL iotk_write_end   (50,"Other_parameters")
> 
>     WRITE(0,*) "Writing main grid"
>     CALL iotk_write_attr(attr,"npw",   ngm_g,first=.true.)
>     CALL iotk_write_attr(attr,"gamma_only", gamma_only )
>     CALL iotk_write_attr(attr,"cutoff","NOT AVAILABLE")
>     IF(.not.single_file) &
>       CALL iotk_link(50,"Main_grid","mgrid",create=.true.,binary=.not.ascii,raw=raw)
>     CALL iotk_write_begin(50,"Main_grid",attr=attr)
>     CALL iotk_write_attr(attr,"units", "crystal",first=.true.)
>     CALL iotk_write_dat(50,"g",itmp_g(1:3,1:ngm_g),fmt="(3i5)", attr=attr)
>     CALL iotk_write_attr(attr,"units", "tpiba^2",first=.true.)
>     CALL iotk_write_dat(50,"gg",rtmp_gg(1:ngm_g),attr=attr)
>     CALL iotk_write_end(50,"Main_grid")
>   ENDIF
>   DEALLOCATE( rtmp_gg )
> 
>   ! for each k point build and write the global G+k indexes array
>   ALLOCATE( igwk( npwx_g,nkstot ) )
>   WRITE(0,*) "Writing grids for wfc"
>   CALL iotk_write_attr (attr,"npwx",npwx_g,first=.true.)
>   IF(ionode) CALL iotk_write_begin(50,"Wfc_grids",ATTR=attr)

557c721
# Changed output file
<       if ( ionode ) WRITE(50, *) ' ik, ngg, ngk_g = ', ik, ngg, ngk_g( ik )
---
>       WRITE( stdout,*) ' ik, ngg, ngk_g = ', ik, ngg, ngk_g( ik )

562,563c726,737
# Changed what was output
<     if ( ionode ) write(50, '(3i10,4ES24.15E3)') ik, groundState(ik), ngk_g(ik), wk(ik), xk(1:3,ik)
<     !
---
>     IF( ionode ) THEN
>       CALL iotk_write_attr (attr,"npw",ngk_g(ik),first=.true.)
>       CALL iotk_write_attr(attr,"gamma_only", gamma_only )
>       CALL iotk_write_attr (attr,"kcry",xk(1:3,ik))
>       IF(.not.single_file) &
>           CALL iotk_link(50,"Kpoint"//iotk_index(ik),"grid"//iotk_index(ik), &
>                          create=.true.,binary=.not.ascii,raw=raw)
>       CALL iotk_write_begin(50,"Kpoint"//iotk_index(ik),attr)
>       CALL iotk_write_dat  (50,"index",igwk(1:ngk_g(ik),ik))
>       CALL iotk_write_dat  (50,"grid",itmp_g(1:3,igwk(1:ngk_g(ik),ik)),fmt="(3i5)")
>       CALL iotk_write_end  (50,"Kpoint"//iotk_index(ik))
>     ENDIF
565,691d738
<   !
<   if ( ionode ) then
<     !  
<     write(50, '("# Number of G-vectors. Format: ''(i10)''")')
<     write(50, '(i10)') ngm_g
<     !
<     write(50, '("# Number of PW-vectors. Format: ''(i10)''")')
<     write(50, '(i10)') npw_g
<     !
<     write(50, '("# Number of min - max values of fft grid in x, y and z axis. Format: ''(6i10)''")')
<     write(50, '(6i10)') minval(itmp_g(1,1:ngm_g)), maxval(itmp_g(1,1:ngm_g)), &
<                         minval(itmp_g(2,1:ngm_g)), maxval(itmp_g(2,1:ngm_g)), &
<                         minval(itmp_g(3,1:ngm_g)), maxval(itmp_g(3,1:ngm_g))
<     !
<     write(50, '("# Cell (a.u.). Format: ''(a5, 3ES24.15E3)''")')
<     write(50, '("# a1 ",3ES24.15E3)') at(:,1)*alat
<     write(50, '("# a2 ",3ES24.15E3)') at(:,2)*alat
<     write(50, '("# a3 ",3ES24.15E3)') at(:,3)*alat
<     !
<     write(50, '("# Reciprocal cell (a.u.). Format: ''(a5, 3ES24.15E3)''")')
<     write(50, '("# b1 ",3ES24.15E3)') bg(:,1)*tpiba
<     write(50, '("# b2 ",3ES24.15E3)') bg(:,2)*tpiba
<     write(50, '("# b3 ",3ES24.15E3)') bg(:,3)*tpiba
<     !
<     write(50, '("# Number of Atoms. Format: ''(i10)''")')
<     write(50, '(i10)') nat
<     !
<     write(50, '("# Number of Types. Format: ''(i10)''")')
<     write(50, '(i10)') nsp
<     !
<     write(50, '("# Atoms type, position(1:3) (a.u.). Format: ''(i10,3ES24.15E3)''")')
<     DO i = 1, nat
<       xyz = tau(:,i)
<       write(50,'(i10,3ES24.15E3)') ityp(i), tau(:,i)*alat
<     ENDDO
<     !
<     write(50, '("# Number of Bands. Format: ''(i10)''")')
<     write(50, '(i10)') nbnd
<     !
<     DO ik = 1, nkstot
<       !
<       open(72, file=trim(exportDir)//"/grid"//iotk_index(ik))
<       write(72, '("# Wave function G-vectors grid")')
<       write(72, '("# G-vector index, G-vector(1:3) miller indices. Format: ''(4i10)''")')
<       !
<       do ink = 1, ngk_g(ik)
<         write(72, '(4i10)') igwk(ink,ik), itmp_g(1:3,igwk(ink,ik))
<       enddo
<       !
<       close(72)
<       !
<     ENDDO
<     !
<     open(72, file=trim(exportDir)//"/mgrid")
<     write(72, '("# Full G-vectors grid")')
<     write(72, '("# G-vector index, G-vector(1:3) miller indices. Format: ''(4i10)''")')
<     !
<     do ink = 1, ngm_g
<       write(72, '(4i10)') ink, itmp_g(1:3,ink)
<     enddo
<     !
<     close(72)
<     !
<     !DEALLOCATE( itmp_g )
<     !
<     write(50, '("# Spin. Format: ''(i10)''")')
<     write(50, '(i10)') nspin
<     !
<     allocate( nnTyp(nsp) )
<     nnTyp = 0
<     do i = 1, nat
<       nnTyp(ityp(i)) = nnTyp(ityp(i)) + 1
<     enddo
<     !
<     DO i = 1, nsp
<       !
<       call read_upf(upf, grid, ierr, 71, trim(outdir)//'/'//trim(prefix)//'.save/'//trim(psfile(i)))
<       !
<       if (  upf%typ == 'PAW' ) then
<         !
<         write(stdout, *) ' PAW type pseudopotential found !'
<         !
<         write(50, '("# Element")')
<         write(50, *) trim(atm(i))
<         write(50, '("# Number of Atoms of this type. Format: ''(i10)''")')
<         write(50, '(i10)') nnTyp(i)
<         write(50, '("# Number of projectors. Format: ''(i10)''")')
<         write(50, '(i10)') upf%nbeta              ! number of projectors
<         !
<         write(50, '("# Angular momentum, index of the projectors. Format: ''(2i10)''")')
<         ms = 0
<         do inb = 1, upf%nbeta
<           write(50, '(2i10)') upf%lll(inb), inb
<           ms = ms + 2*upf%lll(inb) + 1
<         enddo
<         !
<         write(50, '("# Number of channels. Format: ''(i10)''")')
<         write(50, '(i10)') ms
<         !
<         write(50, '("# Number of radial mesh points. Format: ''(2i10)''")')
<         write(50, '(2i10)') upf%mesh, upf%kkbeta ! number of points in the radial mesh, number of point inside the aug sphere
<         !
<         write(50, '("# Radial grid, Integratable grid. Format: ''(2ES24.15E3)''")')
<         do im = 1, upf%mesh
<           write(50, '(2ES24.15E3)') upf%r(im), upf%rab(im) ! r(mesh) radial grid, rab(mesh) dr(x)/dx (x=linear grid)
<         enddo
<         !
<         write(50, '("# AE, PS radial wfc for each beta function. Format: ''(2ES24.15E3)''")')
<         if ( upf%has_wfc ) then   ! if true, UPF contain AE and PS wfc for each beta
<           do inb = 1, upf%nbeta
<             do im = 1, upf%mesh
<               write(50, '(2ES24.15E3)') upf%aewfc(im, inb), upf%pswfc(im, inb) 
<                                         ! wfc(mesh,nbeta) AE wfc, wfc(mesh,nbeta) PS wfc
<             enddo
<           enddo
<         else
<           write(50, *) 'UPF does not contain AE and PS wfcs!!'
<           stop
<         endif
<         !
<       endif
<       !
<     enddo
<     !
<   ENDIF
<   !
<   DEALLOCATE( rtmp_gg )
---
>   IF(ionode) CALL iotk_write_end(50,"Wfc_grids")
>   DEALLOCATE( itmp_g )
> 
> 
735a747,749
<   WRITE(stdout,*) "Writing Eigenvalues"
<
<   IF( ionode ) THEN
<     !
<     write(50, '("# Fermi Energy (Hartree). Format: ''(ES24.15E3)''")')
<     write(50, '(ES24.15E3)') ef*ryToHartree
<     flush(50)
<     !
<     DO ik = 1, nkstot
<       !
<       ispin = isk( ik )
<       !
<       open(72, file=trim(exportDir)//"/eigenvalues"//iotk_index(ik))
<       !
<       write(72, '("# Spin : ",i10, " Format: ''(a9, i10)''")') ispin
<       write(72, '("# Eigenvalues (Hartree), band occupation number. Format: ''(2ES24.15E3)''")')
<       !
<       do ibnd = 1, nbnd
<         if ( wk(ik) == 0.D0 ) then 
<           write(72, '(2ES24.15E3)') et(ibnd,ik)*ryToHartree, wg(ibnd,ik)
<         else
<           write(72, '(2ES24.15E3)') et(ibnd,ik)*ryToHartree, wg(ibnd,ik)/wk(ik)
<         endif
<       enddo
<       !
<       close(72)
<       !
<     ENDDO
<     !
<   endif
<   !
<   if ( ionode .and. writeWFC ) WRITE(stdout,*) "Writing Wavefunctions"
---
> !
>   ALLOCATE(raux(1:nbnd))
> !
>
>   WRITE(0,*) "Writing band structure"
>
>   IF( ionode ) THEN
>     CALL iotk_write_attr (attr,"nspin",nspin,first=.true.)
>     CALL iotk_write_attr (attr,"nk",nkstot)
>     CALL iotk_write_attr (attr,"nbnd",nbnd)
>     CALL iotk_write_attr (attr,"efermi",ef)
>     CALL iotk_write_attr (attr,"units","Rydberg")
>     CALL iotk_write_begin(50,"Eigenvalues",attr=attr)
>     DO ik=1,nkstot
>       CALL iotk_write_dat(50,"e"//iotk_index(ik),et(1:nbnd,ik))
>     ENDDO
>     CALL iotk_write_end  (50,"Eigenvalues")
>   ENDIF
>
>   IF( ionode ) THEN
>     CALL iotk_write_attr (attr,"nspin",nspin,first=.true.)
>     CALL iotk_write_attr (attr,"nk",nkstot)
>     CALL iotk_write_attr (attr,"nbnd",nbnd)
>     CALL iotk_write_begin(50,"OCCUPATIONS",attr=attr)
>     DO ik=1,nkstot
>       IF ( wk(ik) == 0.D0 ) THEN
>         !
>         raux = wg(:,ik)
>         !
>       ELSE
>         !
>         raux = wg(:,ik) / wk(ik)
>         !
>       END IF
>       CALL iotk_write_dat(50,"wg"//iotk_index(ik),raux(1:nbnd))
>     ENDDO
>     CALL iotk_write_end  (50,"OCCUPATIONS")
>   ENDIF
>   !
>   DEALLOCATE(raux)
773a791,833
> 
> 
>   WRITE(0,*) "Writing Eigenvectors"
>   IF( ionode ) CALL iotk_write_begin(50, "Eigenvectors")
> 
>   DO ik = 1, nkstot
>     IF(.not.single_file .and. ionode) &
>        CALL iotk_link(50,"Kpoint"//iotk_index(ik),"wfc"//iotk_index(ik), &
>                          create=.true.,binary=.not.ascii,raw=raw)
> 
>      local_pw = 0
>      IF( (ik >= iks) .and. (ik <= ike) ) THEN
> 
>        CALL davcio (evc, 2*nwordwfc, iunwfc, (ik-iks+1), - 1)
>        local_pw = ngk(ik-iks+1)
> 
>      ENDIF
> 
> 
>      ALLOCATE(l2g_new(local_pw))
> 
>      l2g_new = 0
>      DO ig = 1, local_pw
>        ngg = igk_l2g(ig,ik-iks+1)
>        DO ig_ = 1, ngk_g(ik)
>          IF(ngg == igwk(ig_,ik)) THEN
>            l2g_new(ig) = ig_
>            exit
>          ENDIF
>        ENDDO
>      ENDDO
> 
> 
>      ispin = isk( ik )
>      !  WRITE(0,*) ' ### ', ik,nkstot,iks,ike,kunit,nproc,nproc_pool
>      CALL write_restart_wfc(50, ik, nkstot, kunit, ispin, nspin, &
>          wfc_scal, evc, twf0, evc, twfm, npw_g, gamma_only, nbnd, &
>          l2g_new(:),local_pw )
>      DEALLOCATE(l2g_new)
>   ENDDO
>   IF( ionode ) CALL iotk_write_end  (50, "Eigenvectors")
> 
> 
775,850c835,839
<   IF ( nkb > 0 ) THEN
<     !
---
>   ! If specified and if USPP are used the wfcs S_psi are written
>   ! | spsi_nk > = \hat S | psi_nk >
>   ! where S is the overlap operator of US PP
>   !
>   IF ( uspp_spsi .and. nkb > 0 ) THEN
>
>        ALLOCATE( sevc(npwx,nbnd), STAT=ierr )
>        IF (ierr/=0) CALL errore( ' write_export ',' Unable to allocate SEVC ', abs(ierr) )
>
>        WRITE(0,*) "Writing Eigenvectors_Spsi"
>        IF( ionode ) CALL iotk_write_begin(50, "Eigenvectors_Spsi")
743d854,856
>            IF(.not.single_file .and. ionode) &
>                  CALL iotk_link(50,"Kpoint"//iotk_index(ik),"swfc"//iotk_index(ik), &
>                        create=.true.,binary=.not.ascii,raw=raw)
747c862
<         CALL davcio (evc, nwordwfc, iunwfc, (ik-iks+1), - 1)
---
>                CALL davcio (evc, 2*nwordwfc, iunwfc, (ik-iks+1), - 1)
757a869
<           if ( ionode ) then
<             !
<             WRITE(stdout,*) "Writing projectors of kpt", ik
<             !
< !            file_exists = .false.
< !            inquire(file =trim(exportDir)//"/projectors"//iotk_index(ik), exist = file_exists)
< !            if ( .not. file_exists ) then
< !              open(73, file=trim(exportDir)//"/projectors"//iotk_index(ik))
< !              write(73, '("# Complex projectors |beta>. Format: ''(2ES24.15E3)''")')
< !              write(73,'(2i10)') nkb, ngk_g(ik)
< !              do j = 1, nkb
< !                do i = 1, ngk_g(ik)
< !                  write(73,'(2ES24.15E3)') vkb(i,j)
< !                enddo
< !              enddo
< !              close(73)
< !            endif
< !            !
< !            file_exists = .false.
< !            inquire(file =trim(exportDir)//"/evc"//iotk_index(ik), exist = file_exists)
< !            if ( .not. file_exists ) then
< !              !
< !              open(74, file=trim(exportDir)//"/evc"//iotk_index(ik))
< !              write(74, '("# Spin : ",i10, " Format: ''(a9, i10)''")') ispin
< !              write(74, '("# Complex : wavefunction coefficients (a.u.)^(-3/2). Format: ''(2ES24.15E3)''")')
< !              write(74,'(2i10)') nbnd, ngk_g(ik)
< !              !
< !              do j = 1, nbnd
< !                do i = 1, ngk_g(ik)
< !                  write(74,'(2ES24.15E3)') evc(i,j) 
< !                enddo
< !              enddo
< !              !
< !              close(74)
< !              !
< !            endif
< !            !
<             file_exists = .false.
<             inquire(file =trim(exportDir)//"/projections"//iotk_index(ik), exist = file_exists)
<             if ( .not. file_exists ) then
<               open(72, file=trim(exportDir)//"/projections"//iotk_index(ik))
<               write(72, '("# Complex projections <beta|psi>. Format: ''(2ES24.15E3)''")')
<               do j = 1,  becp%nbnd ! number of bands 
<                 do i = 1, nkb      ! number of projections
<                   write(72,'(2ES24.15E3)') becp%k(i,j)
<                 enddo
<               enddo
<               !
<               close(72)
<               !
<             endif
<           endif
810d873
>                CALL s_psi(npwx, npw, nbnd, evc, sevc)

827,848a889
<       if ( ionode ) then
<         file_exists = .false.
<         inquire(file =trim(exportDir)//"/wfc"//iotk_index(ik), exist = file_exists)
<         if ( .not. file_exists ) then
<           open (72, file=trim(exportDir)//"/wfc"//iotk_index(ik))
<           write(72, '("# Spin : ",i10, " Format: ''(a9, i10)''")') ispin
<           write(72, '("# Complex : wavefunction coefficients (a.u.)^(-3/2). Format: ''(2ES24.15E3)''")')
<           !
<           open(73, file=trim(exportDir)//"/projectors"//iotk_index(ik))
<           write(73, '("# Complex projectors |beta>. Format: ''(2ES24.15E3)''")')
<           write(73,'(2i10)') nkb, ngk_g(ik)
< !          WRITE(stdout,*) "Writing Wavefunctions of kpt", ik
< !          open(74, file=trim(exportDir)//"/evc"//iotk_index(ik))
< !          write(74, '("# Spin : ",i10, " Format: ''(a9, i10)''")') ispin
< !          write(74, '("# Complex : wavefunction coefficients (a.u.)^(-3/2). Format: ''(2ES24.15E3)''")')
<         endif
<       endif
<       !
<       CALL mp_bcast( file_exists, ionode_id, world_comm )
<       !
<       if ( .not. file_exists ) then

849,850c890,892
# Changed output file
<         CALL write_restart_wfc(72, exportDir, ik, nkstot, kunit, ispin, nspin, &
<                                wfc_scal, evc, twf0, evc, twfm, npw_g, gamma_only, nbnd, &
<                                l2g_new(:),local_pw )
---
>            CALL write_restart_wfc(50, ik, nkstot, kunit, ispin, nspin, &
>                wfc_scal, sevc, twf0, sevc, twfm, npw_g, gamma_only, nbnd, &
>                l2g_new(:),local_pw )

852,862a893
# Added new output and closed files
<         CALL write_restart_wfc(73, exportDir, ik, nkstot, kunit, ispin, nspin, &
<                                wfc_scal, vkb, twf0, evc, twfm, npw_g, gamma_only, nkb, &
<                                l2g_new(:), local_pw )
<       endif
<       !
<       if ( .not. file_exists .and. ionode ) then
<         close(72)
<         close(73)
< !        close(74)
<       endif
<       !

865d895,898
# Removed some unneeded stuff
>        IF( ionode ) CALL iotk_write_end  (50, "Eigenvectors_Spsi")
> 
>        DEALLOCATE( sevc, STAT=ierr )
>        IF ( ierr/= 0 ) CALL errore('pw_export','Unable to deallocate SEVC',abs(ierr))
913a906,909
>   IF( ionode ) THEN
>     CALL iotk_close_write(50)
>   ENDIF
> 

916c912
# Changed program name
< END PROGRAM pw_export_for_TME
---
> END PROGRAM pw_export
